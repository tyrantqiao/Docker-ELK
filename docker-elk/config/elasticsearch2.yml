# 集群名称，默认为elasticsearch
cluster.name: es

# 节点Node名称，ES启动时会自动创建节点名称，默认的是从ES的，但你也可进行配置
#node.name: "birdESNode01"
node.name: "node2"
# # 是否作为主节点，每个节点都可以被配置成为主节点，默认值为true
node.master: true
#
# # 是否存储数据，即存储索引片段，默认值为true
node.data: true
#
# # xx
node.ingest: true
# 1) 当master为false，而data为true时，会对该节点产生严重负荷；
# 2) 当master为true，而data为false时，该节点作为一个协调者；
# 3) 当master为false，data也为false时，该节点就变成了一个负载均衡器。
# 你可以通过连接来查看集群状态
# http://localhost:9200/_cluster/health
# http://localhost:9200/_cluster/nodes
# 或者使用kibana监控
#
# # 设置一个索引的碎片数量，默认值为5
# index.number_of_shards: 5
#
# # 设置一个索引可被复制的数量，默认值为1
# index.number_of_replicas: 1
#
# # 当你想要禁用公布式时，你可以进行如下设置：
# index.number_of_shards: 1
# index.number_of_replicas: 0
#
# 这两个属性的设置直接影响集群中索引和搜索操作的执行。假设你有足够的机器来持有碎片和复制品，那么可以按如下规则设置这两个值：
# 1) 拥有更多的碎片可以提升索引执行能力，并允许通过机器分发一个大型的索引；
# 2) 拥有更多的复制器能够提升搜索执行能力以及集群能力。
# 对于一个索引来说，number_of_shards只能设置一次，而number_of_replicas可以使用索引更新设置API在任何时候被增加或者减少。
# ElasticSearch关注加载均衡、迁移、从节点聚集结果等等。可以尝试多种设计来完成这些功能。
# 可以连接http://localhost:9200/A/_status来检测索引的状态。
#
# # 配置文件所在的位置，即elasticsearch.yml和logging.yml所在的位置
# path.conf: /path/to/conf
#
# # 分配给当前节点的索引数据所在的位置
# path.data: /path/to/data
#
# # 可以可选择的包含一个以上的位置，使得数据在文件级别跨越位置，这样在创建时就有更多的自由路径
# path.data: /path/to/data1,/path/to/data2
#
# # 日志文件所在位置
# path.logs: /path/to/logs
#
# # 临时文件位置
# path.work: /path/to/work
#
# # 插件安装位置
# path.plugins: /path/to/plugins
#
# #  默认情况下，ElasticSearch使用0.0.0.0地址（也就是说如果这个机子有几个网卡，则ElasticSearch都可以通过这些IP来使用其服务。所以如果我们的服务器有网卡绑定在外网时一定要注意设置ElasticSearch的属性），并为http传输开启9200-9300端口，为节点到节点的通信开启9300-9400端口，也可以自行设置IP地址：
network.bind_host: 0.0.0.0
#
# # 该节点在外部的ip
#network.publish_host: 172.16.16.10
#
# # bind_host和publish_host可以一起设置：（如果不想外网访问ES，可以设置这个）
network.host: 0.0.0.0
#
# # 可以定制该节点与其他节点交互的端口：
transport.tcp.port: 9301
#
# # 节点间交互时，可以设置是否压缩
# transport.tcp.compress: true
#
# # 可以为Http传输监听定制端口：
http.port: 9201
#
# # 设置内容的最大长度：
# http.max_content_length: 100mb
#
# # 禁止HTTP
# http.enabled: false
#
# # 允许在N个节点启动后恢复过程：
# gateway.recover_after_nodes: 1
#
# # 设置初始化恢复过程的超时时间：
# gateway.recover_after_time: 5m
#
# # 设置ping其他节点时的超时时间，网络比较慢时可将该值设大：
# discovery.zen.ping.timeout: 3s
#
# # 禁止当前节点发现多个集群节点，默认值为true：
# discovery.zen.ping.multicast.enabled: false
#
# # 设置新节点被启动时能够发现的主节点列表：
discovery.zen.ping.unicast.hosts: ["172.16.16.10:9300", "172.16.16.10:9301"]
# #
# # # 设置节点数=拥有节点数/2+1，防止脑裂的情况。
discovery.zen.minimum_master_nodes: 2
# # # 监控
xpack.monitoring.collection.enabled: true
# # 设置是否可以通过正则或者_all删除或者关闭索引
# action.destructive_requires_name 默认false 允许 可设置true不允许
#
# # 下面是一些查询时的慢日志参数设置
# index.search.slowlog.level: TRACE
# index.search.slowlog.threshold.query.warn: 10s
# index.search.slowlog.threshold.query.info: 5s
# index.search.slowlog.threshold.query.debug: 2s
# index.search.slowlog.threshold.query.trace: 500ms
# index.search.slowlog.threshold.fetch.warn: 1s
# index.search.slowlog.threshold.fetch.info: 800ms
# index.search.slowlog.threshold.fetch.debug:500ms
# index.search.slowlog.threshold.fetch.trace: 200ms
