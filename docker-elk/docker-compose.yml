version: '3.6'
services:
  filebeat:
    image: docker.elastic.co/beats/filebeat:6.3.1
    container_name: filebeat
    command: --strict.perms=false -e
    #当报无法访问filebeat.yml文件时，尝试将配置文件挪个地方，有时因为权限问题导致无法访问。以下同理
    user: root
    volumes:
      - /etc/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - /etc/logs/:/home/logs
    networks: ['stack']
    healthcheck:
      test: filebeat test config
      interval: 30s
      timeout: 15s
      retries: 5    
  
  zoo1:
    image: zookeeper
    restart: always
    container_name: zoo1
    ports:
      - "2181:2181"
    networks: ['stack']
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888 server.4=zoo4:2888:3888:observer

  zoo2:
    image: zookeeper
    restart: always
    container_name: zoo2
    ports:
      - "2182:2181"
    networks: ['stack']
    environment:     
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888 server.4=zoo4:2888:3888:observer

  zoo3:
    image: zookeeper
    restart: always
    container_name: zoo3
    ports:
      - "2183:2181"
    networks: ['stack']
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888 server.4=zoo4:2888:3888:observer

  zoo4:
    image: zookeeper
    restart: always
    container_name: zoo4
    ports:
      - "2184:2181"
    networks: ['stack']
    environment:
      ZOO_MY_ID: 4
      PEER_TYPE: observer
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888 server.4=zoo4:2888:388:observer

  broker1:
    image: wurstmeister/kafka
    restart: always
    container_name: broker1
    ports:
      - "9092:9092"
    depends_on:
      - zoo1
      - zoo2
      - zoo3
      - zoo4
    networks: ['stack']
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: broker1
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_HOST_NAME: broker1
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181,zoo4:2181
      KAFKA_LISTENERS: PLAINTEXT://broker1:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker1:9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  broker2:
    image: wurstmeister/kafka
    restart: always
    container_name: broker2
    ports:
      - "9093:9092"
    depends_on:
      - zoo1
      - zoo2
      - zoo3
      - zoo4    
    networks: ['stack']
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_HOST_NAME: broker2
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_HOST_NAME: broker2
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181,zoo4:2181
      KAFKA_LISTENERS: PLAINTEXT://broker2:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker2:9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  broker3:
    image: wurstmeister/kafka
    restart: always
    container_name: broker3
    ports:
      - "9094:9092"
    depends_on:
      - zoo1
      - zoo2
      - zoo3
      - zoo4
    networks: ['stack']
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ADVERTISED_HOST_NAME: broker3
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_HOST_NAME: broker3
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181,zoo4:2181
      KAFKA_LISTENERS: PLAINTEXT://broker3:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker3:9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.3.1
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    networks: ['stack']
    volumes:
      - /etc/elk/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      #用于做备份文件夹
      - /opt/es-repo/:/opt/es-repo
    healthcheck:
      test: curl --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  elasticsearch2:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.3.1
    container_name: elasticsearch2
    ports:
      - "9201:9201"
      - "9301:9301"
    networks: ['stack']
    depends_on: ['elasticsearch']
    volumes:
      - /etc/elk/config/elasticsearch2.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - /opt/es-repo/:/opt/es-repo
    healthcheck:
      test: curl --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt -s https://localhost:9201 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:6.3.1
    container_name: logstash
    networks: ['stack']
    volumes:
      # logstash.yml=配置文件
      - /etc/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      # xxx.conf是各种处理消息源的配置，自己定义即可
      - /etc/logstash/conf.d/demo.conf:/usr/share/logstash/pipeline/logstash.conf
      # xxx.conf中使用的正则表达式可以写在patterns文件夹下，使用简单一点
      - /etc/logstash/patterns/:/etc/logstash/patterns
    healthcheck:
      test: bin/logstash -t
      interval: 60s
      timeout: 50s
      retries: 5

  #logstash2:
  #  image: docker.elastic.co/logstash/logstash:6.3.1
  #  container_name: logstash2
  #  networks: ['stack']
  #  depends_on: ['elasticsearch','elasticsearch2']
  #  volumes:
  #    # logstash.yml=配置文件
  #    - /etc/logstash/logstash2.yml:/usr/share/logstash/config/logstash.yml
  #    # xxx.conf是各种处理消息源的配置，自己定义即可
  #    - /etc/logstash/conf.d/demo.conf:/usr/share/logstash/pipeline/logstash.conf
  #    # xxx.conf中使用的正则表达式可以写在patterns文件夹下，使用简单一点
  #    - /etc/logstash/patterns:/etc/logstash/patterns
  #  healthcheck:
  #    test: bin/logstash -t
  #    interval: 60s
  #    timeout: 50s
  #    retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:6.3.1
    container_name: kibana
    ports:
      - "5601:5601"
    networks: ['stack']
    depends_on: ['elasticsearch']
    user: root
    volumes:
      - /etc/elk/config/kibana.yml:/usr/share/kibana/config/kibana.yml

networks: {stack: {}}
